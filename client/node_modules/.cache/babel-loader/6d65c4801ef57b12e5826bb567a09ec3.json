{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyDMhXl5NHFxx1f4OBRcDlDNkf4JCuu4Jxc\",\n  authDomain: \"clouds-rest-db.firebaseapp.com\",\n  databaseURL: \"https://clouds-rest-db.firebaseio.com\",\n  projectId: \"clouds-rest-db\",\n  storageBucket: \"clouds-rest-db.appspot.com\",\n  messagingSenderId: \"387654476576\",\n  appId: \"1:387654476576:web:e028c37dbbab55e2802d45\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const collectionRef = firestore.collection('users');\n  const snapShot = await userRef.get();\n  const collectionSnapshot = await collectionRef.get();\n  console.log(\"snapshot\", {\n    collectionSnapshot\n  });\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  console.log(transformedCollection);\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/stephenstocking/Desktop/coding class/react course/clouds-rest/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","collectionRef","collection","snapShot","get","collectionSnapshot","console","log","exists","displayName","email","createdAt","Date","set","error","message","addCollectionAndDocuments","collectionKey","objectsToAdd","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyDMhXl5NHFxx1f4OBRcDlDNkf4JCuu4Jxc\",\n    authDomain: \"clouds-rest-db.firebaseapp.com\",\n    databaseURL: \"https://clouds-rest-db.firebaseio.com\",\n    projectId: \"clouds-rest-db\",\n    storageBucket: \"clouds-rest-db.appspot.com\",\n    messagingSenderId: \"387654476576\",\n    appId: \"1:387654476576:web:e028c37dbbab55e2802d45\"\n  }\n\nfirebase.initializeApp(config);\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const collectionRef = firestore.collection('users');\n\n  const snapShot = await userRef.get()\n  const collectionSnapshot = await collectionRef.get();\n  console.log(\"snapshot\", { collectionSnapshot });\n\n  if(!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName, \n        email, \n        createdAt,\n        ...additionalData\n      })\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n\n  return await batch.commit();\n}\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n  const transformedCollection = collections.docs.map(doc => {\n    const { title, items } = doc.data();\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    }\n  });\n\n  console.log(transformedCollection)\n\n  return transformedCollection.reduce( (accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator\n  }, {})\n  \n};\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject)\n  });\n}\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}