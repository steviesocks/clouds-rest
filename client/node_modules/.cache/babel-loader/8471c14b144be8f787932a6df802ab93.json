{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser, createUserWithEmailAndPassword } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (err) {\n    yield put(signInFailure(err));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (err) {\n    yield put(signInFailure(err));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (err) {\n    put(signInFailure(err));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* isUserAutheticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (err) {\n    yield put(signInFailure(err));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAutheticated);\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (err) {\n    yield put(signOutFailure(err));\n  }\n}\nexport function* signUp({\n  displayName,\n  email,\n  password\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield createUserProfileDocument(user, {\n      displayName\n    });\n    yield put(signUpSuccess());\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart)]);\n}","map":{"version":3,"sources":["/Users/stephenstocking/Desktop/coding class/react course/clouds-rest/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","createUserWithEmailAndPassword","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","err","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAutheticated","onCheckUserSession","CHECK_USER_SESSION","signOut","signUp","displayName","error","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport UserActionTypes from './user.types';\n\nimport { signInSuccess,\n    signInFailure,\n    signOutSuccess, \n    signOutFailure, signUpSuccess, signUpFailure } from './user.actions';\n\nimport { auth, \n    googleProvider, \n    createUserProfileDocument,\n    getCurrentUser,\n    createUserWithEmailAndPassword } from '../../firebase/firebase.utils';\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n    try {\n        const userRef = yield call(createUserProfileDocument, userAuth);\n        const userSnapshot = yield userRef.get()\n        yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }))\n    } catch (err) {\n        yield put(signInFailure(err))\n    }\n}\n\nexport function* signInWithGoogle() {\n    try {\n        const { user } = yield auth.signInWithPopup(googleProvider);\n        yield getSnapshotFromUserAuth(user)\n    } catch (err) {\n        yield put(signInFailure(err))\n    }\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n    try {\n        const  { user } = yield auth.signInWithEmailAndPassword(email, password);\n        yield getSnapshotFromUserAuth(user)\n    } catch (err) {\n        put(signInFailure(err))\n    }\n}\n\nexport function* onGoogleSignInStart() {\n    yield takeLatest(\n        UserActionTypes.GOOGLE_SIGN_IN_START,\n        signInWithGoogle\n        )\n}\n\nexport function* onEmailSignInStart() {\n    yield takeLatest(\n        UserActionTypes.EMAIL_SIGN_IN_START,\n        signInWithEmail\n    )\n}\n\nexport function* isUserAutheticated() {\n    try {\n        const userAuth = yield getCurrentUser();\n        if (!userAuth) return;\n        yield getSnapshotFromUserAuth(userAuth);\n    } catch (err) {\n        yield put(signInFailure(err))\n    }\n}\n\nexport function* onCheckUserSession() {\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAutheticated)\n}\n\nexport function* signOut() {\n    try {\n        yield auth.signOut();\n        yield put(signOutSuccess())\n    } catch (err) {\n        yield put(signOutFailure(err))\n    }\n}\n\nexport function* signUp({displayName, email, password}) {\n    try {\n        const { user } = yield auth.createUserWithEmailAndPassword(email, password);\n        yield createUserProfileDocument(user, { displayName });\n        yield put(signUpSuccess());\n    } catch (error) {\n        yield put(signUpFailure(error));\n    }\n}\n\nexport function* onSignOutStart() {\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut)\n}\n\nexport function* onSignUpStart() {\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUp)\n}\n\n\nexport function* userSagas() {\n    yield all([\n        call(onGoogleSignInStart), \n        call(onEmailSignInStart),\n        call(onCheckUserSession),\n        call(onSignOutStart),\n        call(onSignUpStart)\n    ])\n}"]},"metadata":{},"sourceType":"module"}